Models/Department.cs

public class Department
{
    public int Id { get; set; }
    public string Name { get; set; }
}


Models/Skill.cs

public class Skill
{
    public int Id { get; set; }
    public string Name { get; set; }
}

Models/Employee.cs

public class Employee
{
    public int Id { get; set; }
    public string Name { get; set; }
    public int Salary { get; set; }
    public bool Permanent { get; set; }
    public Department Department { get; set; }
    public List<Skill> Skills { get; set; }
    public DateTime DateOfBirth { get; set; }
}


Controllers/EmployeeController.cs

using Microsoft.AspNetCore.Mvc;
using WebApi.Filters;
using WebApi.Models; 

[ApiController]
[Route("api/[controller]")]
[TypeFilter(typeof(CustomAuthFilter))] 
public class EmployeeController : ControllerBase
{
    private static List<Employee> _employees;

    static EmployeeController()
    {
        _employees = GetStandardEmployeeList();
    }

    [HttpGet("GetStandard")]
    [ProducesResponseType(typeof(List<Employee>), StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status500InternalServerError)]
    public ActionResult<List<Employee>> GetStandard()
    {
        // To simulate exception for testing CustomExceptionFilter
        // throw new Exception("Simulated server error");
        return Ok(_employees);
    }

    [HttpPost]
    public IActionResult Post([FromBody] Employee employee)
    {
        _employees.Add(employee);
        return Ok(employee);
    }

    [HttpPut("{id}")]
    public IActionResult Put(int id, [FromBody] Employee updated)
    {
        var emp = _employees.FirstOrDefault(e => e.Id == id);
        if (emp == null) return NotFound();

        emp.Name = updated.Name;
        emp.Salary = updated.Salary;
        emp.Permanent = updated.Permanent;
        emp.Department = updated.Department;
        emp.Skills = updated.Skills;
        emp.DateOfBirth = updated.DateOfBirth;

        return Ok(emp);
    }

    private static List<Employee> GetStandardEmployeeList()
    {
        return new List<Employee>
        {
            new Employee
            {
                Id = 1,
                Name = "John Doe",
                Salary = 50000,
                Permanent = true,
                DateOfBirth = new DateTime(1990, 1, 1),
                Department = new Department { Id = 1, Name = "HR" },
                Skills = new List<Skill> {
                    new Skill { Id = 1, Name = "Communication" },
                    new Skill { Id = 2, Name = "Recruitment" }
                }
            },
            new Employee
            {
                Id = 2,
                Name = "Jane Smith",
                Salary = 60000,
                Permanent = false,
                DateOfBirth = new DateTime(1988, 5, 12),
                Department = new Department { Id = 2, Name = "IT" },
                Skills = new List<Skill> {
                    new Skill { Id = 3, Name = "C#" },
                    new Skill { Id = 4, Name = "ASP.NET" }
                }
            }
        };
    }
}


Filters/CustomAuthFilter.cs


using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;

public class CustomAuthFilter : ActionFilterAttribute
{
    public override void OnActionExecuting(ActionExecutingContext context)
    {
        if (!context.HttpContext.Request.Headers.TryGetValue("Authorization", out var token))
        {
            context.Result = new BadRequestObjectResult("Invalid request - No Auth token");
            return;
        }

        if (!token.ToString().Contains("Bearer"))
        {
            context.Result = new BadRequestObjectResult("Invalid request - Token present but Bearer unavailable");
        }
    }
}



Filters/CustomExceptionFilter.cs

using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;

public class CustomExceptionFilter : IExceptionFilter
{
    public void OnException(ExceptionContext context)
    {
        var exception = context.Exception;
        var logPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "exception_log.txt");
        File.AppendAllText(logPath, $"[{DateTime.Now}] {exception.Message} {Environment.NewLine}");

        context.Result = new ObjectResult("An unexpected error occurred.")
        {
            StatusCode = 500
        };
    }
}
